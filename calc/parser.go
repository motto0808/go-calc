// Code generated by goyacc -l -o parser.go -v parser.output parser.y. DO NOT EDIT.
package calc

import __yyfmt__ "fmt"

import (
	"log"
)

type Token struct {
	tok int
	lit string
	val int
	pos Position
}

type yySymType struct {
	yys        int
	statements []Statement
	statement  Statement
	expr       Expression
	tok        Token
	arr        []NumberExpression
}

const IDENT = 57346
const NUMBER = 57347
const VAR = 57348
const LOR = 57349
const LAND = 57350
const EQ = 57351
const NE = 57352
const LE = 57353
const LT = 57354
const GE = 57355
const GT = 57356
const IN = 57357
const UNARY = 57358

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"VAR",
	"'?'",
	"':'",
	"LOR",
	"LAND",
	"EQ",
	"NE",
	"LE",
	"LT",
	"GE",
	"GT",
	"IN",
	"','",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"';'",
	"'='",
	"'!'",
	"'('",
	"')'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

type LexerWrapper struct {
	s          *Scanner
	recentLit  string
	recentPos  Position
	statements []Statement
}

func (l *LexerWrapper) Lex(lval *yySymType) int {
	tok, lit, pos := l.s.Scan()
	if tok == EOF {
		return 0
	}
	lval.tok = Token{tok: tok, lit: lit, pos: pos}
	if tok == NUMBER {
		lval.tok.val, _ = toNumber(lit)
	}
	l.recentLit = lit
	l.recentPos = pos
	return tok
}

func (l *LexerWrapper) Error(e string) {
	err := __yyfmt__.Sprintf("Line %d, Column %d: %q %s",
		l.recentPos.Line, l.recentPos.Column, l.recentLit, e)
	log.Print(err)
	panic(err)
}

func Parse(s *Scanner) []Statement {
	l := LexerWrapper{s: s}
	if yyParse(&l) != 0 {
		panic("Parse error")
	}
	return l.statements
}

var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 36,
	11, 0,
	12, 0,
	13, 0,
	14, 0,
	15, 0,
	16, 0,
	-2, 14,
	-1, 37,
	11, 0,
	12, 0,
	13, 0,
	14, 0,
	15, 0,
	16, 0,
	-2, 15,
	-1, 38,
	11, 0,
	12, 0,
	13, 0,
	14, 0,
	15, 0,
	16, 0,
	-2, 16,
	-1, 39,
	11, 0,
	12, 0,
	13, 0,
	14, 0,
	15, 0,
	16, 0,
	-2, 17,
	-1, 40,
	11, 0,
	12, 0,
	13, 0,
	14, 0,
	15, 0,
	16, 0,
	-2, 18,
	-1, 41,
	11, 0,
	12, 0,
	13, 0,
	14, 0,
	15, 0,
	16, 0,
	-2, 19,
}

const yyPrivate = 57344

const yyLast = 175

var yyAct = [...]int8{
	3, 56, 52, 33, 47, 24, 25, 26, 28, 29,
	30, 58, 27, 31, 55, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 51, 12,
	50, 15, 14, 16, 17, 18, 19, 20, 21, 13,
	32, 22, 23, 24, 25, 26, 1, 2, 53, 10,
	54, 48, 12, 0, 15, 14, 16, 17, 18, 19,
	20, 21, 13, 0, 22, 23, 24, 25, 26, 12,
	57, 15, 14, 16, 17, 18, 19, 20, 21, 13,
	0, 22, 23, 24, 25, 26, 0, 11, 12, 49,
	15, 14, 16, 17, 18, 19, 20, 21, 13, 0,
	22, 23, 24, 25, 26, 15, 14, 16, 17, 18,
	19, 20, 21, 13, 0, 22, 23, 24, 25, 26,
	14, 16, 17, 18, 19, 20, 21, 13, 0, 22,
	23, 24, 25, 26, 16, 17, 18, 19, 20, 21,
	13, 0, 22, 23, 24, 25, 26, 6, 5, 4,
	6, 5, 13, 0, 22, 23, 24, 25, 26, 0,
	0, 0, 0, 8, 0, 0, 8, 0, 0, 0,
	7, 9, 0, 7, 9,
}

var yyPact = [...]int16{
	143, -1000, 143, 62, 8, -1000, -1000, 146, 146, 146,
	-1000, -1000, 146, -27, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, -22, -1000, -1000,
	22, 81, -1000, -3, 123, 110, 135, 135, 135, 135,
	135, 135, -16, -16, -1000, -1000, -1000, 146, -1000, 146,
	-17, -1000, -1000, 45, 96, -1000, 6, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 46, 47, 0, 40, 30,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 5, 5,
}

var yyR2 = [...]int8{
	0, 0, 2, 2, 5, 1, 1, 5, 3, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 1, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, 6, 5, 4, 27, 20, 28,
	-1, 25, 7, 17, 10, 9, 11, 12, 13, 14,
	15, 16, 19, 20, 21, 22, 23, 4, -3, -3,
	-3, -3, -4, 30, -3, -3, -3, -3, -3, -3,
	-3, -3, -3, -3, -3, -3, -3, 26, 29, 8,
	-5, 31, 5, -3, -3, 31, 18, 25, 5,
}

var yyDef = [...]int8{
	1, -2, 1, 0, 0, 5, 6, 0, 0, 0,
	2, 3, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 9, 10,
	0, 0, 8, 0, 12, 13, -2, -2, -2, -2,
	-2, -2, 20, 21, 22, 23, 24, 0, 11, 0,
	0, 26, 27, 0, 7, 25, 0, 4, 28,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 27, 3, 3, 3, 23, 3, 3,
	28, 29, 21, 19, 18, 20, 3, 22, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 8, 25,
	3, 26, 3, 7, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 30, 3, 31,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 9, 10, 11, 12, 13,
	14, 15, 16, 17, 24,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.statements = nil
			if l, isLexerWrapper := yylex.(*LexerWrapper); isLexerWrapper {
				l.statements = yyVAL.statements
			}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.statements = append([]Statement{yyDollar[1].statement}, yyDollar[2].statements...)
			if l, isLexerWrapper := yylex.(*LexerWrapper); isLexerWrapper {
				l.statements = yyVAL.statements
			}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.statement = &ExpressionStatement{Expr: yyDollar[1].expr}
		}
	case 4:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.statement = &VarDefStatement{VarName: yyDollar[2].tok.lit, Expr: yyDollar[4].expr}
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &NumberExpression{Val: yyDollar[1].tok.val}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = &IdentifierExpression{Lit: yyDollar[1].tok.lit}
		}
	case 7:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.expr = &TernaryExpression{Cond: yyDollar[1].expr, TrueExpr: yyDollar[3].expr, FalseExpr: yyDollar[5].expr}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &InExpression{LHS: yyDollar[1].expr, Arr: yyDollar[3].arr}
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryNotExpression{SubExpr: yyDollar[2].expr}
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.expr = &UnaryMinusExpression{SubExpr: yyDollar[2].expr}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &ParenExpression{SubExpr: yyDollar[2].expr}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinOpLogicExpression{LHS: yyDollar[1].expr, Operator: LAND, RHS: yyDollar[3].expr}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinOpLogicExpression{LHS: yyDollar[1].expr, Operator: LOR, RHS: yyDollar[3].expr}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinOpExpression{LHS: yyDollar[1].expr, Operator: EQ, RHS: yyDollar[3].expr}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinOpExpression{LHS: yyDollar[1].expr, Operator: NE, RHS: yyDollar[3].expr}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinOpExpression{LHS: yyDollar[1].expr, Operator: LE, RHS: yyDollar[3].expr}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinOpExpression{LHS: yyDollar[1].expr, Operator: LT, RHS: yyDollar[3].expr}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinOpExpression{LHS: yyDollar[1].expr, Operator: GE, RHS: yyDollar[3].expr}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinOpExpression{LHS: yyDollar[1].expr, Operator: GT, RHS: yyDollar[3].expr}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinOpExpression{LHS: yyDollar[1].expr, Operator: int('+'), RHS: yyDollar[3].expr}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinOpExpression{LHS: yyDollar[1].expr, Operator: int('-'), RHS: yyDollar[3].expr}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinOpExpression{LHS: yyDollar[1].expr, Operator: int('*'), RHS: yyDollar[3].expr}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinOpExpression{LHS: yyDollar[1].expr, Operator: int('/'), RHS: yyDollar[3].expr}
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.expr = &BinOpExpression{LHS: yyDollar[1].expr, Operator: int('%'), RHS: yyDollar[3].expr}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.arr = yyDollar[2].arr
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		{

		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.arr = []NumberExpression{NumberExpression{Val: yyDollar[1].tok.val}}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.arr = append(yyDollar[1].arr, NumberExpression{Val: yyDollar[3].tok.val})
		}
	}
	goto yystack /* stack new state and value */
}
